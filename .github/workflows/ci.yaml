name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check Flask app syntax
      run: |
        python -m py_compile app.py
    
    - name: Test Flask app startup
      run: |
        python -c "from app import app; print('Flask app imports successfully')"

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      run: |
        docker build -t st3el/student-task-manager:${{ github.sha }} -t st3el/student-task-manager:latest .
        docker push st3el/student-task-manager:${{ github.sha }}
        docker push st3el/student-task-manager:latest
    
    - name: Test Docker container
      run: |
        docker run -d --name test-container -p 5001:5000 st3el/student-task-manager:${{ github.sha }}
        sleep 10
        curl -f http://localhost:5001/health || exit 1
        docker stop test-container
        docker rm test-container

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: Test SSH Connection
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"
    
    - name: Deploy to EC2 with Kubernetes
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
          # Pull the latest Docker image
          docker pull st3el/student-task-manager:${{ github.sha }}
          docker pull st3el/student-task-manager:latest
          
          # Update Kubernetes deployment with new image
          kubectl set image deployment/student-task-manager student-task-manager=st3el/student-task-manager:${{ github.sha }} -n student-tasks
          
          # Wait for rollout to complete
          kubectl rollout status deployment/student-task-manager -n student-tasks --timeout=300s
          
          # Verify deployment
          kubectl get pods -n student-tasks -l app=student-task-manager
        EOF
        
    - name: Health check
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
          # Get service endpoint
          SERVICE_IP=$(kubectl get service student-task-manager-service -n student-tasks -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || kubectl get service student-task-manager-service -n student-tasks -o jsonpath='{.spec.clusterIP}')
          SERVICE_PORT=$(kubectl get service student-task-manager-service -n student-tasks -o jsonpath='{.spec.ports[0].port}')
          
          # Perform health check
          if [ ! -z "$SERVICE_IP" ] && [ ! -z "$SERVICE_PORT" ]; then
            echo "Performing health check on http://$SERVICE_IP:$SERVICE_PORT/health"
            curl -f http://$SERVICE_IP:$SERVICE_PORT/health || exit 1
            echo "Deployment successful!"
          else
            echo "Could not determine service endpoint"
            kubectl get services -n student-tasks
            exit 1
          fi
        EOF